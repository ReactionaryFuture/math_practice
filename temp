package main

import (
	"image/color"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

func main() {
	app := app.New()
	window := app.NewWindow("math_practice")
	app.Settings().SetTheme(&BigTextTheme{})

	timer := NewTimerBar()
	timer.TextFormatter = func() string {
		return ""
	}
	entry := widget.NewEntry()

	canvasObject := container.NewBorder(timer, nil, nil, nil, entry)

	window.Resize(fyne.NewSize(800, 300))
	window.SetContent(canvasObject)
	window.ShowAndRun()
}

type QuestionPage struct {
	timer        *TimerBar
	entry        widget.Entry
	canvasObject *fyne.Container
}

func NewQuestionPage(question string) QuestionPage {
	// this function creates the interface where questions are administered and answers are given by the user
	
	// create a timer bar at the top of the page to show the user how much more time he has before the question is
	// marked incorrect.
	timer := NewTimerBar()
	timer.TextFormatter = func() string {
		return ""
	}
	
	//create the entry object where the user recieves his question and gives his answers
	entry := widget.NewEntry()

	// make the canvas object
	canvasObject := container.NewBorder(timer, nil, nil, nil, entry)

	// make and return the QuestionPage struct
	questionPage := &QuestionPage{
		timer:        timer,
		entry:        *entry,
		canvasObject: canvasObject,
	}
	return *questionPage
}

type TimerBar struct {
	widget.ProgressBar
}

func NewTimerBar() *TimerBar {
	// timer bar is created as distinct from widget.ProgressBar because the default MinSize needs to be overridden
	// as a temporary hack to get large text in the entry widget until rich text is released.
	
	prog := &TimerBar{}
	prog.ExtendBaseWidget(prog)

	return prog
}

func (w *TimerBar) MinSize() fyne.Size {
	// override the minsize of widget.ProgressBar
	
	return fyne.NewSize(1, 30)
}

type BigTextTheme struct{}

func (m BigTextTheme) Color(name fyne.ThemeColorName, variant fyne.ThemeVariant) color.Color {
	return theme.DefaultTheme().Color(name, variant)
}

func (m BigTextTheme) Icon(name fyne.ThemeIconName) fyne.Resource {
	return theme.DefaultTheme().Icon(name)
}

func (m BigTextTheme) Font(style fyne.TextStyle) fyne.Resource {
	return theme.DefaultTheme().Font(style)
}

func (m BigTextTheme) Size(name fyne.ThemeSizeName) float32 {
	if name == theme.SizeNameText {
		return 150
	} else {
		return theme.DefaultTheme().Size(name)
	}
}
